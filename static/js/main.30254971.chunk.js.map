{"version":3,"sources":["components/square.jsx","components/board.jsx","components/game.jsx","app.jsx","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","Board","renderSquare","i","squares","calculateWinner","lines","length","a","b","c","Game","state","history","Array","fill","stepNumber","xIsNext","handleClick","slice","setState","concat","winner","this","console","log","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uPAUeA,MARf,SAAgBC,GACZ,OACI,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACrCF,EAAMG,QCwBJC,MAzBf,SAAeJ,GACb,IAAMK,EAAe,SAACC,GAAD,OACnB,kBAAC,EAAD,CAAQH,MAAOH,EAAMO,QAAQD,GAAIJ,QAAS,kBAAMF,EAAME,QAAQI,OAGhE,OACE,6BACE,yBAAKL,UAAU,aACZI,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKJ,UAAU,aACZI,EAAa,GACbA,EAAa,GACbA,EAAa,IAEhB,yBAAKJ,UAAU,aACZI,EAAa,GACbA,EAAa,GACbA,EAAa,MCrBtB,SAASG,EAAgBD,GAUvB,IATA,IAAME,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAH,EAAI,EAAGA,EAAIG,EAAMC,OAAQJ,IAAK,CAAC,IAAD,cACnBG,EAAMH,GADa,GAC9BK,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GACpE,OAAON,EAAQI,GAGnB,OAAO,K,IAyCMG,E,4MArCbC,MAAQ,CACNC,QAAS,CAAC,CAAET,QAASU,MAAM,GAAGC,KAAK,QACnCC,WAAY,EACZC,SAAS,G,EAGXC,YAAc,SAACf,GACb,IAAMU,EAAU,EAAKD,MAAMC,QAAQM,MAAM,EAAG,EAAKP,MAAMI,WAAa,GAE9DZ,EADUS,EAAQA,EAAQN,OAAS,GACjBH,QAAQe,QAE5Bd,EAAgBD,IAAYA,EAAQD,KAGxCC,EAAQD,GAAK,EAAKS,MAAMK,QAAU,IAAM,IAExC,EAAKG,SAAS,CACZP,QAASA,EAAQQ,OAAO,CAAC,CAAEjB,aAC3BY,WAAYH,EAAQN,OACpBU,SAAU,EAAKL,MAAMK,Y,uDAKvB,IAEMK,EAASjB,EAFCkB,KAAKX,MAAMC,QACHU,KAAKX,MAAMI,YACIZ,SAEvC,OADAoB,QAAQC,IAAIH,GAEV,6BACE,gDACA,kBAAC,EAAD,CAAOvB,QAASwB,KAAKL,YAAad,QAASmB,KAAKX,MAAMC,QAAQ,U,GAhCnDa,IAAMC,WCJVC,EAZH,WACR,OACI,yBAAK9B,UAAU,OACX,4CACA,kBAAC,EAAD,QCEQ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.30254971.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Square(props){\n    return(\n        <button className='square' onClick={props.onClick}>\n            {props.value}\n        </button>\n    )\n}\n\nexport default Square;\n","import React from \"react\";\n\nimport Square from \"./square\";\n\nfunction Board(props) {\n  const renderSquare = (i) => (\n    <Square value={props.squares[i]} onClick={() => props.onClick(i)} />\n  );\n\n  return (\n    <div>\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n}\nexport default Board;\n","import React from \"react\";\nimport Board from \"./board\";\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nclass Game extends React.Component {\n  state = {\n    history: [{ squares: Array(9).fill(null) }],\n    stepNumber: 0,\n    xIsNext: true,\n  };\n\n  handleClick = (i) => {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n\n    this.setState({\n      history: history.concat([{ squares }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  };\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    console.log(winner);\n    return (\n      <div>\n        <h1> GAME component </h1>\n        <Board onClick={this.handleClick} squares={this.state.history[0]} />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react'\nimport './App.css' \nimport Game from './components/game'\n\n\n\nconst App = () =>{\n    return(\n        <div className=\"app\">\n            <h1> Tic-Tac-Toe</h1>\n            <Game />\n\n        </div>\n    )\n\n} \n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}